// Generated by CoffeeScript 1.7.1
(function() {
  var PhaserArcanoid, arcanoid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PhaserArcanoid = (function() {
    function PhaserArcanoid() {
      this.update = __bind(this.update, this);
      this.create = __bind(this.create, this);
      this.preload = __bind(this.preload, this);
    }

    PhaserArcanoid.prototype.preload = function() {
      this.game.load.image('ground', 'assets/images/ground.png');
      this.game.load.image('desk', 'assets/images/desk.png');
      this.game.load.image('ball', 'assets/images/ball.png');
      this.game.load.image('brick', 'assets/images/brick.png');
      this.game.load.image('guard', 'assets/images/guard.png');
      this.game.load.image('moveable', 'assets/images/moveable.png');
      return this.game.load.image('background', 'assets/images/back.jpg');
    };

    PhaserArcanoid.prototype.create = function() {
      this.game.physics.startSystem(Phaser.Physics.ARCADE);
      this.game.add.tileSprite(0, 0, 640, 600, 'background');
      this.ground = this.game.add.sprite(0, this.game.world.height - 24, 'ground');
      this.desk = this.game.add.sprite(20, this.game.world.height - 40, 'desk');
      this.ball = this.game.add.sprite(26, this.game.world.height - 144, 'ball');
      this.bricks = this.game.add.group();
      this.guards = this.game.add.group();
      this.moveables = this.game.add.group();
      this.center_text = this.game.add.text(280, this.game.world.height / 2 - 16, '', {
        fontSize: 44,
        fill: '#fff',
        align: 'center'
      });
      this.finish_text = this.game.add.text(220, this.game.world.height / 2 - 16, '', {
        fontSize: 44,
        fill: '#fff',
        align: 'center'
      });
      this.lives_text = this.game.add.text(2, this.game.world.height - 16, 'Lives: ' + this.lives, {
        fontSize: 14,
        fill: '#fff'
      });
      this.lives_text.fontSize = 14;
      this.controls_text = this.game.add.text(this.game.world.width - 170, this.game.world.height - 16, 'Controls: ◁ ▷, ▽ to stop', {
        fontSize: 14,
        fill: '#fff'
      });
      this.controls_text.fontSize = 14;
      this.game.physics.arcade.enable(this.ground);
      this.game.physics.arcade.enable(this.desk);
      this.game.physics.arcade.enable(this.ball);
      this.bricks.enableBody = true;
      this.guards.enableBody = true;
      this.moveables.enableBody = true;
      this.setupLevel(this.current_level);
      this.ground.body.immovable = true;
      this.desk.body.immovable = true;
      this.desk.body.collideWorldBounds = true;
      this.desk.body.bounce.x = 1.0;
      this.ball.body.collideWorldBounds = true;
      this.ball.body.bounce.x = 1.0;
      this.ball.body.bounce.y = 1.0;
      this.ball.body.velocity.y = -250;
      this.ball.body.velocity.x = -250;
      return this.cursors = this.game.input.keyboard.createCursorKeys();
    };

    PhaserArcanoid.prototype.collideBricks = function(moveable, other) {
      if (!moveable.collided) {
        moveable.body.velocity.x *= -1;
      }
      moveable.collided = true;
      return setTimeout(function() {
        return moveable.collided = false;
      }, 500);
    };

    PhaserArcanoid.prototype.update = function() {
      this.game.physics.arcade.collide(this.desk, this.ground);
      this.game.physics.arcade.collide(this.desk, this.ball);
      this.game.physics.arcade.collide(this.ball, this.ground, this.ballFalled, null, this);
      this.game.physics.arcade.collide(this.ball, this.bricks, this.collectBrick, null, this);
      this.game.physics.arcade.collide(this.ball, this.moveables, this.collectBrick, null, this);
      this.game.physics.arcade.overlap(this.moveables, this.bricks, this.collideBricks, null, this);
      this.game.physics.arcade.collide(this.moveables, this.guards, this.collideBricks, null, this);
      this.game.physics.arcade.collide(this.moveables, this.moveables);
      this.game.physics.arcade.collide(this.ball, this.guards);
      if (this.cursors.left.isDown) {
        return this.desk.body.velocity.x = -200;
      } else if (this.cursors.right.isDown) {
        return this.desk.body.velocity.x = 200;
      } else if (this.cursors.down.isDown) {
        return this.desk.body.velocity.x = 0;
      }
    };

    PhaserArcanoid.prototype.collectBrick = function(ball, brick) {
      brick.kill();
      if (this.bricks.total === 0 && this.moveables.total === 0) {
        this.current_level += 1;
        if (this.current_level >= this.levels.length) {
          this.showFinish('You are winner!');
          return ball.destroy();
        } else {
          return this.setupLevel(this.current_level);
        }
      }
    };

    PhaserArcanoid.prototype.ballFalled = function(ball, ground) {
      this.lives -= 1;
      this.lives_text.text = 'Lives: ' + this.lives;
      if (this.lives === 0) {
        this.showFinish('You are looser!');
        return ball.destroy();
      }
    };

    PhaserArcanoid.prototype.setupLevel = function(level) {
      var brick, coords, direction, guard, moveable, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      this.guards.removeAll();
      if (this.levels[level].bricks) {
        _ref = this.levels[level].bricks;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          coords = _ref[_i];
          brick = this.bricks.create(coords[0], coords[1], 'brick');
          brick.body.immovable = true;
        }
      }
      if (this.levels[level].guards) {
        _ref1 = this.levels[level].guards;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          coords = _ref1[_j];
          guard = this.guards.create(coords[0], coords[1], 'guard');
          guard.body.immovable = true;
        }
      }
      if (this.levels[level].moveables) {
        _ref2 = this.levels[level].moveables;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          coords = _ref2[_k];
          moveable = this.moveables.create(coords[0], coords[1], 'moveable');
          direction = 1;
          if (Math.random() > 0.5) {
            direction = -1;
          }
          moveable.body.velocity.x = (100 + Math.floor(Math.random() * 150)) * direction;
          moveable.body.collideWorldBounds = true;
          moveable.body.bounce.x = 1.0;
          moveable.body.immovable = true;
        }
      }
      return this.showPopup('Level ' + (level + 1));
    };

    PhaserArcanoid.prototype.showPopup = function(popup_text) {
      var instance;
      this.center_text.text = popup_text;
      instance = this;
      return setTimeout(function() {
        return instance.center_text.text = '';
      }, 3000);
    };

    PhaserArcanoid.prototype.showFinish = function(popup_text) {
      return this.finish_text.text = popup_text;
    };

    PhaserArcanoid.prototype.start = function() {
      this.levels = [
        {
          bricks: [[0, 0], [40, 0], [80, 0], [120, 0], [160, 0], [200, 0], [240, 0], [280, 0], [320, 0], [360, 0], [400, 0], [440, 0], [480, 0], [520, 0], [560, 0], [600, 0], [0, 24], [40, 24], [80, 24], [120, 24], [160, 24], [200, 24], [240, 24], [280, 24], [320, 24], [360, 24], [400, 24], [440, 24], [480, 24], [520, 24], [560, 24], [600, 24]]
        }, {
          bricks: [[0, 0], [80, 0], [160, 0], [40, 24], [120, 24], [0, 48], [80, 48], [160, 48], [440, 0], [520, 0], [600, 0], [480, 24], [560, 24], [440, 48], [520, 48], [600, 48]],
          guards: [[0, 72], [40, 72], [80, 72], [120, 72], [160, 72], [440, 72], [480, 72], [520, 72], [560, 72], [600, 72]]
        }, {
          bricks: [[200, 0], [200, 24], [200, 48], [200, 72], [200, 96], [400, 0], [400, 24], [400, 48], [400, 72], [400, 96]],
          moveables: [[100, 0], [120, 48], [40, 96], [280, 24], [320, 72], [460, 0], [500, 48], [540, 96]]
        }
      ];
      this.current_level = 0;
      this.lives = 5;
      return this.game = new Phaser.Game(640, 600, Phaser.AUTO, 'game', {
        preload: this.preload,
        create: this.create,
        update: this.update
      });
    };

    return PhaserArcanoid;

  })();

  arcanoid = new PhaserArcanoid;

  arcanoid.start();

}).call(this);
